using AutoMapper;
using Library.Domains;
using Library.DTOs.Request.Auth;
using Library.DTOs.Request.Client;
using Library.DTOs.Request.Create;
using Library.DTOs.Request.Update;
using Library.DTOs.Response;
using System;

namespace Library.Configs
{
    public class MappingConfigurations : Profile
    {
        public MappingConfigurations() 
        {
            // Mapeo de Autor
            CreateMap<UpdateAutorDTO, Autor>()
                .ForMember(dest => dest.Id, source => source.MapFrom(x => Guid.Parse(x.Id))) // string a Guid
                .ForMember(dest => dest.FechaNacimiento, source => source.MapFrom(x => DateTime.Parse(x.FechaNacimiento))); // string a Fecha
                //.ForMember(x => x.Cantidad,
                //    opt => opt.MapFrom(src => src.Libros.Count)); // lista
            CreateMap<CreateAutorDTO, Autor>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(_ => Guid.NewGuid()))
                .ForMember(dest => dest.FechaNacimiento, source => source.MapFrom(x => DateTime.Parse(x.FechaNacimiento)));
            CreateMap<Autor, AutorDTO>()
                .ForMember(dest => dest.Id, source =>
                    source.MapFrom(x => x.Id.ToString().Replace("-", string.Empty)))
                .ForMember(dest => dest.Pais,
               source => source.MapFrom(x => x.Pais != null ? x.Pais.Nombre : null))
                .ForMember(dest => dest.FechaNacimiento, source => source.MapFrom(x => x.FechaNacimiento.ToString("yyyy-MM-dd"))); // Fecha a string
            //CreateMap<AutorDTO, Autor>()
            //    .ForMember(dest => dest.Id, source =>
            //        source.MapFrom(x => Guid.ParseExact(x.Id, "N")))
            //    .ForMember(dest => dest.FechaNacimiento, source => source.MapFrom(x => DateTime.ParseExact(x.FechaNacimiento, "yyyy-MM-dd", null)));


            // Mapeo de Genero
            CreateMap<UpdateGeneroDTO, Genero>()
                .ForMember(dest => dest.Id, source => source.MapFrom(x => int.Parse(x.Id)));
            CreateMap<CreateGeneroDTO, Genero>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()); // Ignore Id mapping as it's generated by the database
            CreateMap<Genero, GeneroDTO>()
                .ForMember(dest => dest.Id, source => source.MapFrom(x => x.Id.ToString()))
                .ReverseMap();

            // Mapeo de Libro
            CreateMap<UpdateLibroDTO, Libro>()
                .ForMember(dest => dest.Id, source => source.MapFrom(x => Guid.Parse(x.Id)))
                .ForMember(dest => dest.ISBN, source => source.MapFrom(x => x.ISBN))
                .ForMember(dest => dest.Titulo, source => source.MapFrom(x => x.Titulo))
                .ForMember(dest => dest.FechaPublicacion, source => source.MapFrom(x => string.IsNullOrEmpty(x.FechaPublicacion) ? null : (DateTime?)DateTime.Parse(x.FechaPublicacion))) // parseo de fecha con posibilidad de null
                .ForMember(dest => dest.GeneroId, source => source.MapFrom(x => x.GeneroId));
            CreateMap<CreateLibroDTO, Libro>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(_ => Guid.NewGuid()))
                .ForMember(dest => dest.AutorId, opt => opt.MapFrom(src => Guid.Parse(src.AutorId)))
                .ForMember(dest => dest.GeneroId, opt => opt.MapFrom(src => src.GeneroId))
                .ForMember(dest => dest.FechaPublicacion, opt => opt.MapFrom(src => string.IsNullOrEmpty(src.FechaPublicacion) ? null : (DateTime?)DateTime.Parse(src.FechaPublicacion)));
            CreateMap<Libro, LibroDTO>()
                .ForMember(dest => dest.Id, source => source.MapFrom(x => x.Id.ToString().Replace("-", string.Empty)))
                .ForMember(dest => dest.FechaPublicacion, source => source.MapFrom(x => x.FechaPublicacion.HasValue ? x.FechaPublicacion.Value.ToString("yyyy-MM-dd") : null)) // parseo de fecha con posibilidad de null
                .ForMember(dest => dest.Autor, source => source.MapFrom(x => x.Autor.Nombre))
                .ForMember(dest => dest.Genero, source => source.MapFrom(x => x.Genero.Nombre));

            // Mapeo de Usuario
            CreateMap<Usuario, UsuarioDTO>().ReverseMap();
            CreateMap<Usuario, RegisterUsuarioDTO>().ReverseMap();
            CreateMap<Usuario, EditUsuarioDTO>().ReverseMap();

            // Mapeo de Pais
            CreateMap<PaisDTO, Pais>()
                .ForMember(dest => dest.Id, source => source.MapFrom(x => int.Parse(x.ccn3)))
                .ForMember(dest => dest.Nombre, opt => opt.MapFrom(src => src.Name.official))
                .ReverseMap(); // permite mapear al reves
        }
    }
}
